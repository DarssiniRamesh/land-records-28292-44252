{"is_source_file": true, "format": "JavaScript (Node.js/Express)", "description": "This file implements a backend API for a Land Records Management System, providing user authentication, plot details, applications, notifications, document uploads, and demo data management. It includes in-memory data stores for users, plots, applications, notifications, payments, and documents, as well as route handlers for various API endpoints with role-based access control.", "external_files": ["express", "body-parser", "jsonwebtoken", "cors", "multer", "uuid"], "external_methods": ["require('express')", "require('body-parser')", "require('jsonwebtoken')", "require('cors')", "require('multer')", "uuidv4()"], "published": ["/api/register", "/api/login", "/api/me", "/api/plots", "/api/plots/:plotId", "/api/applications", "/api/applications/:id/status", "/api/documents/upload", "/api/payments/initiate", "/api/notifications", "/api/sample/reset", "/api/user/language"], "classes": [], "methods": [{"name": "printStartupDiagnostics", "description": "Outputs environment diagnostics during server startup, including env variables, port, and Node.js version."}, {"name": "authorizeRoles", "description": "Middleware to enforce role-based access control for API endpoints."}, {"name": "sendNotification", "description": "Creates and stores a notification message for a user in the in-memory store."}, {"name": "app.post('/api/register')", "description": "Registers a new user with role 'citizen' and sends a welcome notification."}, {"name": "app.post('/api/login')", "description": "Authenticates user credentials and issues a JWT token."}, {"name": "app.get('/api/me')", "description": "Returns profile details of the currently authenticated user."}, {"name": "app.get('/api/plots')", "description": "Lists all land plots, optionally filtered by owner email."}, {"name": "app.get('/api/plots/:plotId')", "description": "Retrieves detailed information about a specific land plot."}, {"name": "app.get('/api/applications')", "description": "Lists applications, filtered for citizens by their own applications or admins/officers showing all."}, {"name": "app.post('/api/applications')", "description": "Allows citizens to submit new land application requests."}, {"name": "app.post('/api/applications/:id/status')", "description": "Allows officers/admins to update the status of applications."}, {"name": "app.post('/api/documents/upload')", "description": "Handles document uploads, storing files in-memory and returning a document ID."}, {"name": "app.post('/api/payments/initiate')", "description": "Simulates initiating a payment for an application and automatically sets payment as completed."}, {"name": "app.get('/api/notifications')", "description": "Retrieves notifications targeted to the current user."}, {"name": "app.post('/api/sample/reset')", "description": "Resets in-memory data stores to demo state; restricted to admin role."}, {"name": "app.post('/api/user/language')", "description": "Allows users to switch their preferred language setting ('en' or 'hi')."}, {"name": "startServer", "description": "Starts the Express server and handles startup errors related to port binding."}], "calls": ["jwt.verify", "jwt.sign", "users.some", "users.find", "plots.find", "applications.find", "applications.filter", "notifications.push", "payments.push", "documents.push", "res.status", "res.json", "res.send", "app.listen", "console.log", "console.warn", "console.error"], "search-terms": ["Land Records API", "applications", "user roles", "JWT authentication", "in-memory demo data", "plot details", "document upload", "payment simulation", "role-based access", "API endpoints"], "state": 2, "file_id": 2, "knowledge_revision": 11, "git_revision": "5daf330c7d0e2d6474283731e00d915b9b99a2ef", "revision_history": [{"5": "208a79ff0ac58da7402d3c0895d7718a7eb04166"}, {"10": "5daf330c7d0e2d6474283731e00d915b9b99a2ef"}, {"11": "5daf330c7d0e2d6474283731e00d915b9b99a2ef"}], "ctags": [], "hash": "861cd61a1e677678f51ad7c819b92a3a", "format-version": 4, "code-base-name": "BackendAPIService(Node.js/Express)", "filename": "BackendAPIService(Node.js/Express)/index.js"}